#+options: toc:nil
#+begin_quote
a) An infinite continued fraction is an expression of the form
   $$
   f=\frac{N_{1}}{D_{1}+\frac{N_{2}}{D_{2}+\frac{N_{3}}{D_{3}+\ldots}}}
   $$
   As an example, one can show that the infinite continued fraction expansion
   with the $N_i$ and the $D_i$ all equal to 1 produces $1/\phi$, where $\phi$
   is the golden ratio (described in Section 1.2.2). One way to approximate an
   infinite continued fraction is to truncate the expansion after a given number
   of terms.  Such a truncation (a so-called $k$-term finite continued fraction)
   has the form
   $$
   \frac{N_{1}}{D_{1}+\frac{N_{2}}{\ddots \cdot+\frac{N_{k}}{D_{k}}}}
   $$
   Suppose that =n= and =d= are procedures of one argument (the term index $i$) that
   return the $N_i$ and $D_i$ of the terms of the continued fraction. Define a
   procedure =cont-frac= such that evaluating =(cont-frac n d k)= computes the value
   of the $k$-term finite continued fraction. Check your procedure by
   approximating $1/\phi$ using
   #+begin_src scheme
   (cont-frac (lambda (i) 1.0)
              (lambda (i) 1.0)
              k)
   #+end_src
   for successive values of =k=. How large must you make =k= in order to get an
   approximation that is accurate to 4 decimal places?

b) If your =cont-frac= procedure generates a recursive process, write one that
   generates an iterative process. If it generates an iterative process, write
   one that generates a recursive process.
#+end_quote

a)
    #+begin_src scheme :session "1.37"
   (define (cont-frac n d k)
     (define (iter i)
       (if (= i (+ k 1))
           0
           (/ (n i) (+ (d i) (iter (+ i 1))))))
     (iter 1))
    #+end_src

    #+RESULTS:
    : #<void>

    #+begin_src scheme :session "1.37"
    (cont-frac (lambda (i) 1.0)
               (lambda (i) 1.0)
               k)
    #+end_src

    #+RESULTS:

    $1/\phi$ is equal to 0.61803398875, which means that in order to get an
    approximation accurate to 4 decimal places, we need $k = 11$

b)
