#+options: toc:nil
#+begin_quote
The =smallest-divisor= procedure shown at the start of this section does lots of
needless testing: After it checks to see if the number is divisible by 2 there
is no point in checking to see if it is divisible by any larger even numbers.
This suggests that the values used for =test-divisor= should not be 2, 3, 4, 5, 6,
. . ., but rather 2, 3, 5, 7, 9, . . .. To implement this change, define a
procedure =next= that returns 3 if its input is equal to 2 and otherwise returns
its input plus 2. Modify the =smallest-divisor= procedure to use =(next
test-divisor)= instead of =(+ test-divisor 1)=. With =timed-prime-test= incorporating
this modified version of =smallest-divisor=, run the test for each of the 12
primes found in Exercise 1.22. Since this modification halves the number of test
steps, you should expect it to run about twice as fast. Is this expectation
confirmed? If not, what is the observed ratio of the speeds of the two
algorithms, and how do you explain the fact that it is different from 2?
#+end_quote

#+begin_src scheme :session "1.23" :exports none
(define (timed-prime-test n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime n (- (runtime) start-time))))

(define (report-prime n elapsed-time)
  (display n)
  (display " *** ")
  (display elapsed-time)
  (newline))

(define (prime? n)
  (= n (smallest-divisor n)))

(define (smallest-divisor n) (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next test-divisor)))))

(define (divides? a b) (= (remainder b a) 0))

(define (square a) (* a a))

(define (even? a)
  (= (remainder a 2) 0))
#+end_src

#+begin_src scheme :session "1.23"
(define (next n)
  (if (= n 2)
      3
      (+ n 2)))
#+end_src


|  Number | Time without =next= | Time with =next= |
|---------+-------------------+----------------|
|    1009 |                 1 |              1 |
|    1013 |                 1 |              0 |
|    1019 |                 1 |              0 |
|   10007 |                 5 |              2 |
|   10009 |                 4 |              3 |
|   10037 |                 4 |              2 |
|  100003 |                13 |              7 |
|  100019 |                12 |              7 |
|  100043 |                12 |              6 |
| 1000003 |                40 |             21 |
| 1000033 |                38 |             18 |
| 1000037 |                38 |             19 |

As we can see, the times halved.
